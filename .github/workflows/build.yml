name: Build NixOS configs and push to Cachix

on:
  push:
    branches: [ main, ci/** ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare-matrix:
    name: Discover nixosConfigurations
    runs-on: ubuntu-latest
    outputs:
      hosts: ${{ steps.set-matrix.outputs.hosts }}
    steps:
      - uses: actions/checkout@v4

      - name: Free disk space on runner
        shell: bash
        run: |
          set -euxo pipefail
          echo "Disk space before cleanup:"
          df -h
          sudo rm -rf /usr/share/dotnet || true
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /opt/ghc || true
          sudo rm -rf /usr/local/.ghcup || true
          sudo rm -rf /opt/hostedtoolcache || true
          sudo docker system prune --all --volumes --force || true
          sudo apt-get clean || true
          sudo rm -rf /var/lib/apt/lists/* || true
          echo "Disk space after cleanup:"
          df -h


      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # keep low for discovery job
          gc-max-store-size-linux: 1G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-last-accessed: 0
          purge-primary-key: never

      - name: Debug flake evaluation
        shell: bash
        run: |
          set -euxo pipefail
          nix --version
          nix show-config | sed -n '1,200p' || true
          nix flake metadata --render-json | head -c 2000 || true
          nix flake show --json | head -c 2000 || true

      - id: set-matrix
        name: Compute hosts matrix from flake
        shell: bash
        run: |
          set -euo pipefail
          if ! hosts_json=$(nix eval --json --expr 'builtins.attrNames (builtins.getFlake "path:." ).outputs.nixosConfigurations'); then
            echo "nix eval failed; falling back to default hosts"
            hosts_json='["nixos","workstation"]'
          fi
          echo "Discovered nixosConfigurations: ${hosts_json}"
          {
            echo "hosts<<EOF"
            echo "${hosts_json}"
            echo EOF
          } >> "$GITHUB_OUTPUT"

  build:
    name: Build ${{ matrix.host }}
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        host: ${{ fromJSON(needs.prepare-matrix.outputs.hosts) }}
    steps:
      - uses: actions/checkout@v4

      - name: Free disk space on runner
        shell: bash
        run: |
          set -euxo pipefail
          echo "Disk space before cleanup:"
          df -h
          sudo rm -rf /usr/share/dotnet || true
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /opt/ghc || true
          sudo rm -rf /usr/local/.ghcup || true
          sudo rm -rf /opt/hostedtoolcache || true
          sudo docker system prune --all --volumes --force || true
          sudo apt-get clean || true
          sudo rm -rf /var/lib/apt/lists/* || true
          echo "Disk space after cleanup:"
          df -h


      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 20G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-last-accessed: 0
          purge-primary-key: never

      - name: Use and push to Cachix cache (if token available)
        env:
          CACHIX_AUTH_TOKEN: ${{ secrets.CACHIX_AUTH_TOKEN }}
        if: ${{ env.CACHIX_AUTH_TOKEN != '' }}
        uses: cachix/cachix-action@v14
        with:
          name: vladexa
          authToken: ${{ env.CACHIX_AUTH_TOKEN }}

      - name: Build NixOS system toplevel
        env:
          NIX_CONFIG: |
            max-jobs = 1
            experimental-features = nix-command flakes
        run: |
          set -euo pipefail
          nix build --print-build-logs --accept-flake-config \
            ".#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel"

